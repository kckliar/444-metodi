%%%% код использования 

a1=[15, 5, 2, ; 2,10,5,; 3, 1, 30,]

c1=cond(a1);
x10=[1;1;1];
b1=a1*x10;
x1=a1\b1;

a=[7, 4, 3, 4;4,6,3,2;3,4,10,4;3,2,3,9];


c=cond(a)
x0=[1;1;1;1];
b=a*x0;
x=a\b;
r=a*x-b;
err=norm(x-x0)/norm(x0);

D=diag(diag(a));
E=eye(size(a));
Xout =0;
B=-inv(D)*(a-D);

xJ=seidel(a,b,0.001)
errJ=norm(xJ-x0)/norm(x0);
h=max(abs(eig(B)))



%%%%Метод зейделя
function [X, delta,n] = Jakobi(A, F, p) 
% Метод Зейделя (Гаусса-Зейделя)итерационного решения СЛАУ
% Входные параметры:
% A - симметричная положительно определенная матрица СЛАУ
% F - вектор правой части
% p - признак первого вызова функции в серии экспериментов 
%     (необходим для отображения результирующих
%      графиков при многократном вызове функции из одной программы
%      p=0 при первом вызове функции.
% Выходные параметры:
% X - вектор решения, delta - относительная норма приращения решения,
% n - число итераций. 
% Используется нулевое начальное приближение.
% Предельное допустимое число итераций равно 1000.
% Критерием окончания итерационного процесса является выполнение 
% условия delta <=epsilon, где epsilon - малое число.
% 
epsilon=input ('Введите критерий окончания процесса по норме поправки решения epsilon=');
N=length(F);  % размер вектора
X=zeros(N,1); % формирование нулевого вектора решения
 
n=0; % Счетчик итераций
 
disp('Ждите, идут вычисления')
ss=1; % признак итераций
ww=0; % признак вывода результата
 
while ss  
 n=n+1;
 if n>1000
  error('Число итераций >1000')
  ss=0; % аварийный конец итераций
  break
 end
 delta=0; % формирование нулевого максимального приращения решения 
 for j=1:N
  XK=X(j); % запоминание старого значения решения
  X(j)=(F(j)-A(j,[1:j-1,j+1:N])*X([1:j-1,j+1:N]))/A(j,j);
 
  if abs(X(j)-XK)>delta
     delta=abs(X(j)-XK); % формирование нормы поправки решения
  end
 end % конец цикла for
 if delta/norm(X,inf) <=epsilon;% выполнение критерия останова
                                % по относ. норме приращения
   ss=0; % конец итераций, решение получено
   ww=1; % признак вывода на экран
 end
 rr(n)=delta;
 k(n)=n;
end % конец цикла while 
 if ww
   if p~=0 % для всех функций, кроме вызванной первой,
           % необходимо перейти к новому окну
    figure;
   end
   loglog(k, rr, '-')
   grid on
   title('Метод Зейделя')% заголовок окна
   xlabel('Число итераций')% надпись по оси X
   ylabel('Относительная норма приращения решения')% надпись по оси Y
   hold % сохранение окна
 end
